#!/usr/bin/perl
# Pombert lab 2017
# Plot Mash distances from CSV files generated by MashToDistanceCSV.pl
# Requires R, R-devel
# Requires the Rtsne, igraph, ape and phangorn R packages
# E.g. to install the Rtsne package in R: type install.packages("Rtsne")
# Version 0.2b

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

## Usage definition
my $usage = "\nUSAGE = MashR_plotter.pl [OPTIONS]\n
EXAMPLE (simple): MashR_plotter.pl -i Mash.mashdist.csv -o image_01
EXAMPLE (advanced): MashR_plotter.pl -type cluster -m tsne -i Mash.mashdist.csv -R Mash.R -t pdf -o image_01 -pe 30 -it 500";
my $hint = "Type MashR_plotter.pl -h (--help) for list of options\n";
die "$usage\n$hint\n" unless@ARGV;

## Defining options
my $options = <<'END_OPTIONS';

OPTIONS:
--help (-h)		Display this list of options
--type (-t)		Plot type: cluster, tree [Default: cluster]
--method (-m)		Dimensionality reduction method for clusters (mds, tsne) [Default: mds]
--input (-i)		Input file [Default: Mash.mashdist.csv]
--rscript (-R)		R script output name generated [Default: Mash.R]
--format (-f)		Image format (pdf, jpeg, png) [Default: pdf] ## other types not supported yet
--output (-o)		Output plot name [Default: plot]

## t-SNE options
--perplexity (-pe)	Perplexity [Default: 30]
--iterations (-it)	Maximum number of iterations [Default: 500]
--dimensions (-di)	Number of dimensions [Default: 2]

## Phylogenetic tree options
--treetype (-tt)	Tree type: phylogram, cladogram, fan, unrooted or radial [Default: phylogram]
--distmeth (-dm)	Distance method: nj (neighbor-joining) or upgma [Default: nj]
--outgroup (-og)	Desired outgroup from the distance matrix (e.g. -og Streptococcus_agalactiae_09mas018883)

## R plotter options
--plotter (-p)		R plotter (plot, igraph) [Default: plot]
--width (-wd)		Plot width [Default: 16]
--height (-he)		Plot height [Default: 10]
--fonts			Fonts [Default: Times]
--fontsize (-fs)	Plot font size [Default: 106]
--symbol (-pch)		R Plot PCH Symbols (for cluster graphs) [Default: 1]
--edges (-ed)		Draw edges (for cluster graphs)
--xrange (-x)		X-axis width (for cluster graphs) [Default: 0.005]
';
END_OPTIONS

my $help ='';
my $type = 'cluster';
my $tt = 'phylogram'; my $dm = 'nj';
my $wd = '16'; my $he = '10'; my $fs = '16'; ## Width, height and font size
my $method = 'mds';
my $og;
my $input = 'Mash.mashdist.csv';
my $rscript = 'Mash.R';
my $format = 'pdf';
my $perplexity = '30';
my $iterations = '500';
my $dimensions = '2';
my $output = "plot";
my $plotter = 'plot';
my $symbol = '1';
my $edge = '';
my $fonts = "Times";
my $xrange = '0.005';

GetOptions(
	'h|help' => \$help,
	't|type=s' => \$type,
	'tt|treetype=s' => \$tt,
	'dm|distmeth=s' => \$dm,
	'og|outgroup=s' => \$og,
	'wd=i' => \$wd,
	'he=i' => \$he,
	'fs|fontsize=i' => \$fs,
	'method|m=s' => \$method,
	'input|i=s' => \$input,
	'rscript|R=s' => \$rscript,
	'format|f=s' => \$format,
	'perplexity|pe=i' => \$perplexity,
	'iterations|it=i' => \$iterations,
	'dimensions|di=i' => \$dimensions,
	'output|o=s' => \$output,
	'plotter|p=s' => \$plotter,
	'symbol|pch=i' => \$symbol,
	'edges|ed' => \$edge,
	'fonts=s' => \$fonts,
	'xrange|x=s' => \$xrange,
);

if ($help){die "$usage\n$options";}

if ($type eq 'cluster'){
	Rhm();
	if ($format eq 'pdf'){pdf();}
	if ($method eq 'mds'){
		print OUT 'row.names(distance_matrix) <- distance_matrix[, 1]'."\n";
		print OUT 'distance_matrix <- distance_matrix[, -1]'."\n";
		print OUT 'fit <- cmdscale(distance_matrix, eig = TRUE, k = 2)'."\n"; ## Run Multidimensional Scaling (MDS) with function cmdscale(), and get x and y coordinates.
		print OUT 'x <- fit$points[, 1]'."\n";
		print OUT 'y <- fit$points[, 2]'."\n";

		## Creating list of names
		print OUT 'strain.name <- c(';
		while (my $line = <IN>){
			chomp $line;
			$line =~ s/.fasta//g;
			if ($line =~ /(^OTU,(.*)$)/){
				my @names = split(',', $line);
				my $rotation = scalar@names - 2;
				my $end = scalar@names - 1;
				for my $name (1..$rotation){
					print OUT "\"$names[$name]\"\,";
				}
				print OUT "\"$names[$end]\""."\)\n";
			}
		}

		## Choosing plotter
		if ($plotter eq 'plot'){
			if ($edge){print OUT 'plot(x, y, main="mds", t="o", pch = '."$symbol".', xlim = range(x) + c(0, '."$xrange".'))'."\n";}
			else{print OUT 'plot(x, y, main="mds", pch = '."$symbol".', xlim = range(x) + c(0, '."$xrange".'))'."\n";}
			print OUT 'text(x, y, pos = 4, labels = strain.name)'."\n";
		}
		elsif ($plotter eq 'igraph'){
			print OUT 'library(igraph)'."\n";
			print OUT 'g <- graph.full(nrow(distance_matrix))'."\n";
			print OUT 'V(g)$label <- strain.name'."\n";
			print OUT 'layout <- layout.mds(g, dist = as.matrix(distance_matrix))'."\n";
			print OUT 'plot(g, layout = layout, vertex.size = 1)'."\n";
		}
	}
	elsif ($method eq 'tsne'){
		print OUT 'library(Rtsne)'."\n";
		print OUT 'distance_matrix$OTU<-as.factor(distance_matrix$OTU)'."\n";
		print OUT 'colors = rainbow(length(unique(distance_matrix$OTU)))'."\n";
		print OUT 'names(colors) = unique(distance_matrix$OTU)'."\n";
		print OUT 'tsne <- Rtsne(distance_matrix[,-1], dims = '."$dimensions".', perplexity='."$perplexity".', check_duplicates=FALSE, is_distance=TRUE, verbose=TRUE, max_iter = '."$iterations".')'."\n";
		if ($edge){print OUT 'plot(tsne$Y, main="tsne", t="o", pch='."$symbol".')'."\n";}
		else{print OUT 'plot(tsne$Y, main="tsne", pch='."$symbol".')'."\n";}
		print OUT 'text(tsne$Y, cex=0.4, labels=distance_matrix$OTU, col=colors[distance_matrix$OTU])'."\n";
	}

	close IN;
	close OUT;
}
elsif ($type eq 'tree'){
	Rhm();
	if ($format eq 'pdf'){pdf();}
	print OUT 'row.names(distance_matrix) <- distance_matrix[, 1]'."\n";
	print OUT 'distance_matrix <- distance_matrix[, -1]'."\n";
	print OUT 'library(ape)'."\n";
	print OUT 'library(phangorn)'."\n";
	if ($og){
		dist();
		print OUT 'rooted <- root(tree, "'."$og".'", node = NULL, resolve.root = TRUE)'."\n";
		print OUT 'is.rooted(rooted)'."\n"; ## testing for successful rooting
		print OUT 'plot(rooted, "'."$tt".'")'."\n";
	}
	else {
		dist();
		print OUT 'plot(tree, "'."$tt".'")'."\n";
	}
	close IN;
	close OUT;
}
## Running R script
system "chmod a+x $rscript\; ./$rscript";

## subroutines
sub pdf {print OUT "$format".'(file="'."$output\.$format".'", useDingbats=FALSE, family="'."$fonts".'", pointsize='."$fs".', width='."$wd".',height='."$he".')'."\n";}

sub Rhm { ## Generating R script, headers and matrix
	open IN, "<$input" or die "Cannot open $input\n";
	open OUT, ">$rscript";
	print OUT '#!/usr/bin/Rscript'."\n";
	print OUT 'distance_matrix <- read.csv("'."$input".'")'."\n";
}

sub dist{
	if ($dm eq 'nj') {print OUT 'tree <- nj(as.dist(distance_matrix))'."\n";}
	elsif ($dm eq 'upgma') {print OUT 'tree <- upgma(as.dist(distance_matrix))'."\n";}
}