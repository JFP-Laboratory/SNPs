#!/usr/bin/perl
# Pombert lab 2017
# Plot Mash distances from CSV files generated by MashToDistanceCSV.pl
# Requires R, R-devel
# Optional: To install the Rtsne package in R: type install.packages("Rtsne")
# Optional: To install the igraph package in R: type install.packages("igraph")
# Version 0.1a

use strict;
use warnings;
use Getopt::Long qw(GetOptions);

## Usage definition
my $usage = "\nUSAGE = MashR_plotter.pl [OPTIONS]\n
EXAMPLE (simple): MashR_plotter.pl -i Mash.mashdist.csv -o image_01
EXAMPLE (advanced): MashR_plotter.pl -m tsne -i Mash.mashdist.csv -R Mash.R -t pdf -o image_01 -pe 30 -it 500";
my $hint = "Type MashR_plotter.pl -h (--help) for list of options\n";
die "$usage\n$hint\n" unless@ARGV;

## Defining options
my $options = <<'END_OPTIONS';

OPTIONS:
-h (--help)		Display this list of options
--method (-m)		Dimentionsality reduction method (mds, tsne) [Default: mds]
--input (-i)		Input file [Default: Mash.mashdist.csv]
--rscript (-R)		R script generated [Default: Mash.R]
--type (-t)		Image type (pdf, jpeg, png) [Default: pdf] ## other types not supported yet
--output (-o)		Output name [Default: plot]

## t-SNE options
--perplexity (-pe)	Perplexity [Default: 30]
--iterations (-it)	Maximum number of iterations [Default: 500]
--dimensions (-di)	Number of dimensions [Default: 2]

## R plotter options
--plotter (-p)		R plotter (plot, igraph) [Default: plot]
--symbol (-pch)		R Plot PCH Symbols [Default: 1]
--edges (-ed)		Draw edges
--fonts			Fonts [Default: Times]
--xrange (-x)		Plot width [Default: 0.005]
';
END_OPTIONS

my $help ='';
my $method = 'mds';
my $input = 'Mash.mashdist.csv';
my $rscript = 'Mash.R';
my $type = 'pdf';
my $perplexity = '30';
my $iterations = '500';
my $dimensions = '2';
my $output = "plot";
my $plotter = 'plot';
my $symbol = '1';
my $edge = '';
my $fonts = "Times";
my $xrange = '0.005';

GetOptions(
	'h|help' => \$help,
	'method|m=s' => \$method,
	'input|i=s' => \$input,
	'rscript|R=s' => \$rscript,
	'type|t=s' => \$type,
	'perplexity|pe=i' => \$perplexity,
	'iterations|it=i' => \$iterations,
	'dimensions|di=i' => \$dimensions,
	'output|o=s' => \$output,
	'plotter|p=s' => \$plotter,
	'symbol|pch=i' => \$symbol,
	'edges|ed' => \$edge,
	'fonts=s' => \$fonts,
	'xrange|x=s' => \$xrange,
);

if ($help){die "$usage\n$options";}

open IN, "<$input" or die "Cannot open $input\n";
open OUT, ">$rscript";

## Generating R script commands
print OUT '#!/usr/bin/Rscript'."\n";
print OUT 'distance_matrix <- read.csv("'."$input".'")'."\n";

## Generating R PDF output command
if ($type eq 'pdf'){
	print OUT "$type".'(file="'."$output\.$type".'", useDingbats=FALSE, family="'."$fonts".'", pointsize=16, width=16,height=10)'."\n";
}

if ($method eq 'mds'){
	print OUT 'row.names(distance_matrix) <- distance_matrix[, 1]'."\n";
	print OUT 'distance_matrix <- distance_matrix[, -1]'."\n";
	print OUT 'fit <- cmdscale(distance_matrix, eig = TRUE, k = 2)'."\n"; ## Run Multidimensional Scaling (MDS) with function cmdscale(), and get x and y coordinates.
	print OUT 'x <- fit$points[, 1]'."\n";
	print OUT 'y <- fit$points[, 2]'."\n";

	## Creating list of names
	print OUT 'strain.name <- c(';
	while (my $line = <IN>){
		chomp $line;
		$line =~ s/.fasta//g;
		if ($line =~ /(^OTU,(.*)$)/){
			my @names = split(',', $line);
			my $rotation = scalar@names - 2;
			my $end = scalar@names - 1;
			for my $name (1..$rotation){
				print OUT "\"$names[$name]\"\,";
			}
			print OUT "\"$names[$end]\""."\)\n";
		}
	}

	## Choosing plotter
	if ($plotter eq 'plot'){
		if ($edge){print OUT 'plot(x, y, main="mds", t="o", pch = '."$symbol".', xlim = range(x) + c(0, '."$xrange".'))'."\n";}
		else{print OUT 'plot(x, y, main="mds", pch = '."$symbol".', xlim = range(x) + c(0, '."$xrange".'))'."\n";}
		print OUT 'text(x, y, pos = 4, labels = strain.name)'."\n";
	}
	elsif ($plotter eq 'igraph'){
		print OUT 'library(igraph)'."\n";
		print OUT 'g <- graph.full(nrow(distance_matrix))'."\n";
		print OUT 'V(g)$label <- strain.name'."\n";
		print OUT 'layout <- layout.mds(g, dist = as.matrix(distance_matrix))'."\n";
		print OUT 'plot(g, layout = layout, vertex.size = 1)'."\n";
	}
}
elsif ($method eq 'tsne'){
	print OUT 'library(Rtsne)'."\n";
	print OUT 'distance_matrix$OTU<-as.factor(distance_matrix$OTU)'."\n";
	print OUT 'colors = rainbow(length(unique(distance_matrix$OTU)))'."\n";
	print OUT 'names(colors) = unique(distance_matrix$OTU)'."\n";
	print OUT 'tsne <- Rtsne(distance_matrix[,-1], dims = '."$dimensions".', perplexity='."$perplexity".', check_duplicates=FALSE, is_distance=TRUE, verbose=TRUE, max_iter = '."$iterations".')'."\n";
	if ($edge){print OUT 'plot(tsne$Y, main="tsne", t="o", pch='."$symbol".')'."\n";}
	else{print OUT 'plot(tsne$Y, main="tsne", pch='."$symbol".')'."\n";}
	print OUT 'text(tsne$Y, cex=0.4, labels=distance_matrix$OTU, col=colors[distance_matrix$OTU])'."\n";
}

close IN;
close OUT;

## Running R script
system "chmod a+x $rscript\; ./$rscript";